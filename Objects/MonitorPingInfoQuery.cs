using System;
using System.ComponentModel.DataAnnotations;

namespace NetworkMonitor.Objects
{
  /// <summary>
  /// Query parameters for retrieving Host monitoring data. ONLY USE THIS QUERY FOR RETRIEVING HOST MONITORING DATA NOT HOST CONFIG. Only none null fields are used in query. 
  /// </summary>  
  public class MonitorPingInfoQuery
  {
    private int? _dataSetId;
    private int? _monitorPingInfoID;
    private int? _monitorIPID;
    private string? _address;
    //private string? _emailAddress;
    //private string? _prompt;

    public MonitorPingInfoQuery() { }
    ///
    /// This field is Required .The prompt that was entered by the user. The backend will use this to assist in creating a useful reponse for the user.
    ///
    public string? Prompt { get; set; }

    /// <summary>
    /// DataSetIs for selecting MonitorPingInfos. Dont set this if I date range is set. DataSetID=0 is the current running monitor data set.
    /// </summary>
    public int? DataSetId { get => _dataSetId; set => _dataSetId = value; }
    /// <summary>
    ///  MonitorPingInfo.ID
    /// </summary>
    public int? MonitorPingInfoID { get => _monitorPingInfoID; set => _monitorPingInfoID = value; }
    /// <summary>
    /// Host config data is contained in MonitorIP. This is the ID field for a MonitorIP.
    /// </summary>
    public int? MonitorIPID { get => _monitorIPID; set => _monitorIPID = value; }
    /// <summary>
    /// Address or URI of the host.
    /// </summary>
    public string? Address { get => _address; set => _address = value; }

    /// <summary>
    /// Only return hosts that are associated with this email address.
    /// </summary>
    public string? AddUserEmail { get; set; }
    /// <summary>
    /// Paginate the data when the data returned is large or can not all be displayed to the user. Set the maximum number of results per page to be returned.
    /// </summary>
    public int? PageSize { get; set; } = 4;
    /// <summary>
    /// Paginate the data when the data returned is large or can not all be displayed to the. Use the PageNumber to return a page of data. 
    /// /// </summary>
    public int? PageNumber { get; set; } = 1;
    /// <summary>
    /// Is this host enabled.
    /// </summary>
    public bool? Enabled { get; set; }

    /// <summary>
    /// The port the host is using.
    /// </summary>
    public ushort? Port { get; set; }
    /// <summary>
    /// The end point type. Example : http is a website ping, https is a ssl certificate check,  httphtml is a website html load, icmp is a host ping, dns is a dns lookup, smtp is a email server helo message confirmation, quantum is a quantum safe encryption test.
    /// </summary>
    public string? EndPointType { get; set; }


    /// <summary>
    ///  Has a host down alert been sent for this host since the last alert reset.
    /// </summary>
    public bool? AlertSent { get; set; }
    /// <summary>
    /// Has a host down Alert been flagged for this host since the last alert reset.
    /// </summary>
    public bool? AlertFlag { get; set; }
    /// <summary>
    /// The monitoring agents location for the host. The format is 'City - Country' for internet based agents. For local agents the format is 'emailaddress - agentid'.
    /// </summary>
    public string? AgentLocation { get; set; }
    /// <summary>
    /// The UTC start time to query from. When used with DateEnd this gives a range of times to filter on. Note input is assumed to be UTC.
    /// </summary>
    public DateTime? DateStart { get; set; }

    private DateTime? _dateEnd;
    /// <summary>
    /// The UTC end time to query to. 
    /// </summary>
    public DateTime? DateEnd
    {
      get
      {
        if (DateStart != null && (_dateEnd == null || _dateEnd < DateStart.Value.AddHours(6)))
        {
          return DateStart.Value.AddHours(6);
        }
        else
        {
          return _dateEnd;
        }
      }
      set
      {
        _dateEnd = value;
      }
    }

    public string ValidateParameters(bool isDataSetId, bool isMonitorPingInfoID, bool isMonitorIPID, bool isAddress)
    {
      var message = "";
      if (isDataSetId && _dataSetId == null)
      {
        message += " DataSetId is required for this query. ";
      }
      if (isMonitorPingInfoID && _monitorPingInfoID == null)
      {
        message += " MonitorPingInfoID is required for this query. ";
      }
      if (isMonitorIPID && _monitorIPID == null)
      {
        message += " MonitorIPID is required for this query. ";
      }
      if (isAddress && _address == null)
      {
        message += " Address is required for this query. ";
      }
      return message;

    }

    /// <summary>
    /// DO NOT INCLUDE THIS FIELD IT IS AUTO GENERATED BY API.
    /// </summary>
    public UserInfo? User { get; set; }
  }
}
