using System;
using System.ComponentModel.DataAnnotations;

namespace NetworkMonitor.Objects
{
  /// <summary>
  /// Query parameters for retreiving host config. ONLY USE THIS QUERY FOR HOST CONFIG NOT FOR ACTUAL MONITORING DATA.  Only none null fields are used in query 
  /// </summary>  
  public class MonitorIPQuery
  {
       private int? _monitorIPID;
        private string? _address;
    public MonitorIPQuery() { }

    public static class JsonPropertyNames
    {
        public const string Prompt = "prompt";
        public const string EditAuthKey = "auth_key";
        public const string MonitorIPID = "id";
        public const string Email = "email";
        public const string PageSize = "page_size";
        public const string PageNumber = "page_number";
        public const string Enabled = "enabled";
        public const string Address = "address";
        public const string Port = "port";
        public const string Endpoint = "endpoint";
        public const string AgentLocation = "agent_location";
    }
     ///
        /// This field is Required .The prompt that was entered by the user. The backend will use this to assist in creating a useful reponse for the user.
        ///
        public string? Prompt{get; set ;}
   
      /// <summary>
        /// The Edit Auth Key used to save and edit host data non authenticated users.
        /// </summary>
        public string? EditAuthKey { get ; set ; }
      
    /// <summary>
    /// Host config data is contained in MonitorIP. This is the ID field for a MonitorIP.
    /// </summary>
   public int? MonitorIPID {get => _monitorIPID;set => _monitorIPID=value;}


    /// <summary>
    /// Only return hosts that are associated with this email address.
    /// </summary>
    public string? AddUserEmail { get; set; }
    /// <summary>
    /// Paginate the data when the data returned is large or can not all be displayed to the user. Set the maximum number of results per page to be returned.
    /// </summary>
    public int? PageSize { get; set; } = 4;
    /// <summary>
    /// Paginate the data when the data returned is large or can not all be displayed to the. Use the PageNumber to return a page of data. 
    /// /// </summary>
    public int? PageNumber { get; set; } = 1;
    /// <summary>
    /// Is this host enabled.
    /// </summary>
    public bool? Enabled { get; set; }
    /// <summary>
    /// Address or URI of the host.
    /// </summary>
    public string? Address { get => _address; set => _address=value; }

    /// <summary>
    /// The port the host is using.
    /// </summary>
    public ushort? Port { get; set; }
    /// <summary>
    /// The end point type. Example : http is a website ping, https is a ssl certificate check, httphtml is a website html load, icmp is a host ping, dns is a dns lookup, smtp is a email server helo message confirmation, quantum is a quantum safe encryption test.
    /// </summary>
    public string? EndPointType { get; set; }

/// <summary>
/// The monitoring agents location for the host. The format is 'City - Country' for internet based agents. For local agents the format is 'emailaddress - agentid'.
/// </summary>
    public string? AgentLocation { get; set; }

    /// <summary>
/// DO NOT INCLUDE THIS FIELD IT IS AUTO GENERATED BY API.
/// </summary>
public UserInfo? User{get;set;}

     public string ValidateParameters( bool isMonitorIPID, bool isHostAddress)
        {
            var message="";
           
            if (isMonitorIPID && _monitorIPID==null) {
                message+=" MonitorIPID is required for this query. ";
            }
            if (isHostAddress && _address==null){
                message+=" HostAddress is required for this query. ";
            }
          return message;
           
        }


  }
}
